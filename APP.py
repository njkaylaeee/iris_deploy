# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pE4tp_j6Ie-Jxi7ShdsXqcwnIEooWq-d
"""

import streamlit as st
import pandas as pd
import joblib

# Load model
model = joblib.load("GaussianNB.pkl")

# Define Streamlit app with multiple pages
st.set_page_config(page_title="Insurance Classifier", layout="wide")

# Sidebar for navigation
page = st.sidebar.selectbox("Select a page", ["Data Description", "Prediction", "About Naive Bayes"])

# Page 1: Data Description
if page == "Data Description":
    st.title("ðŸ“Š Insurance Dataset Description")
    try:
        df = pd.read_csv("insurance_data.csv")
        st.write("Here's a preview of the dataset:")
        st.dataframe(df.head())

        st.write("### Summary Statistics")
        st.write(df.describe(include="all"))

    except FileNotFoundError:
        st.warning("Dataset not found. Please place `insurance_data.csv` in the same folder.")

# Page 2: Prediction
elif page == "Prediction":
    st.title("ðŸ§  Insurance Class Prediction")
    st.write("Fill in the form below to predict the insurance classification.")

    # Example input fields (adjust to your model features)
    age = st.number_input("Age", min_value=18, max_value=100, value=30)
    bmi = st.number_input("BMI", min_value=10.0, max_value=50.0, value=25.0)
    children = st.number_input("Number of Children", min_value=0, max_value=10, value=1)
    smoker = st.selectbox("Smoker", ["yes", "no"])
    region = st.selectbox("Region", ["northeast", "southeast", "southwest", "northwest"])

    # Convert categorical to numerical if needed (example encoder)
    smoker_encoded = 1 if smoker == "yes" else 0
    region_mapping = {"northeast": 0, "southeast": 1, "southwest": 2, "northwest": 3}
    region_encoded = region_mapping[region]

    input_data = [[age, bmi, children, smoker_encoded, region_encoded]]

    if st.button("Predict"):
        prediction = model.predict(input_data)
        st.success(f"The predicted class is: **{prediction[0]}**")

# Page 3: About Naive Bayes
else:
    st.title("ðŸ“˜ About Naive Bayes")
    st.markdown("""
    Naive Bayes is a **probabilistic classification algorithm** based on Bayes' Theorem with the assumption of feature independence.

    **Why use Naive Bayes?**
    - Fast and easy to implement.
    - Works well with small datasets.
    - Suitable for categorical input variables.

    **Formula:**
    $$ P(Class | Data) = \\frac{P(Data | Class) * P(Class)}{P(Data)} $$

    Since \( P(Data) \) is constant across classes, the model chooses the class with the highest:
    $$ P(Data | Class) * P(Class) $$
    """)

---

### ðŸ§  Notes

- Replace `GaussianNB.pkl` with your trained Naive Bayes model.
- Adjust the input fields based on your modelâ€™s expected features and preprocessing.
- If you want, you can expand the "About" page into a model evaluation page with accuracy, confusion matrix, etc.

---

### ðŸš€ To Run the App

```bash
streamlit run app.py